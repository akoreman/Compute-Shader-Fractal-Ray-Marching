
#pragma kernel CSMain
#pragma multi_compile __ CAST_SHADOWS
#pragma multi_compile __ LIT_SHADING
#pragma multi_compile __ AMBIENT_OCCLUSION
#pragma multi_compile __ GLOW

// These are set from RayMarcher.cs /////////
Texture2D<float4> _source;
RWTexture2D<float4> _target;

float4x4 _cameraToWorldProj;
float4x4 _cameraInverseProj;

float4 _cameraPosition;
float4 _cameraRotation;

float _ambientOcclusionFactor;
float _castShadowFactor;
////////////////////////////////////////

#include "Util.hlsl"
#include "Folds.hlsl"
#include "DistanceEstimators.hlsl"
#include "Fractals.hlsl"

// Accuracy parameters.
static const float epsilon = 0.0001 / 1;
static const float maxMarchDistance = 4*250;
static const int maxNumMarchSteps = 4*250;

// Light direction.
static const float3 lightDirection = normalize(float3(0.6, 0.5, 0.1));

struct Ray
{
	float3 origin;
	float3 direction;
	float closestPoint;
};

Ray CreateRay(float3 origin, float3 direction)
{
	Ray ray;

	ray.origin = origin;
	ray.direction = direction;
	ray.closestPoint = 100000;

	return ray;
}

Ray CreateCameraRay(float2 xy)
{
	float3 origin = _cameraPosition.xyz;

    float3 direction = mul(_cameraInverseProj, float4(xy,0,1)).xyz;
    direction = mul(_cameraToWorldProj, float4(direction,0)).xyz;
    direction = normalize(direction);

	return CreateRay(origin, direction);
}

// Set which fractal is going to be rendered.
float3 GetMinDistance(float3 position)
{
	///// FUNCTIONAL FRACTALS ///////
	float minDistance = MengerBox(position);
	//float minDistance = SierpinskiTetrahedron(position);
	//float minDistance = InfiniteShapes(position);
	//////////////////////////////////

	// Work in Progress
	//float minDistance = TreePlanet(position);
	//float minDistance = SnowStadium(position);

	return minDistance;
}

// Approximate normals by using central difference, source: https://www.iquilezles.org/www/articles/normalsSDF/normalsSDF.htm .
float3 ApproxNormal(float3 position, float dx)
{
	float3 normalVec = float3(0, 0, 0);

	normalVec.x = GetMinDistance(position + float3(dx, 0, 0));
	normalVec.x -= GetMinDistance(position - float3(dx, 0, 0));

	normalVec.y = GetMinDistance(position + float3(0, dx, 0));
	normalVec.y -= GetMinDistance(position - float3(0, dx, 0));

	normalVec.z = GetMinDistance(position + float3(0, 0, dx));
	normalVec.z -= GetMinDistance(position - float3(0, 0, dx));
	
	return normalize(normalVec);
}

// Set what basecolour each pixel shoud start out with.
float4 GetColor(float3 position)
{
	return float4(1,0,0,0);
	//return abs(float4(Position.x, Position.y, Position.z, 0))/10 + float4(.1,.1,.1,0);
}

// Main thread.
[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	_target[id.xy] = _source[id.xy];

	uint width,height;
    _target.GetDimensions(width, height);

	float marchDistance = 0;
	int numMarchSteps = 0;

	//Convert from coordinates [-width,width] and [-heigth,height] to [-1,1] and [-1,1].
	float2 uv = id.xy / float2(width,height) * 2 - 1;

    Ray cameraRay = CreateCameraRay(uv);
	bool hit = false;

	_target[id.xy] = float4(0,1,1,0);

	while (marchDistance < maxMarchDistance && numMarchSteps < maxNumMarchSteps)
	{
		numMarchSteps++;

		float minDistance = GetMinDistance(cameraRay.origin);

		if (minDistance < cameraRay.closestPoint) {cameraRay.closestPoint = minDistance;}

		float light = 1;
		float lighting = 1;

		if (minDistance < epsilon)
		{
			hit = true;

#if AMBIENT_OCCLUSION
			light = 1 -  (float) numMarchSteps / _ambientOcclusionFactor;
#endif

#if LIT_SHADING
			lighting = dot(ApproxNormal(cameraRay.origin, 0.001),lightDirection);
#endif

			_target[id.xy] = light * lighting * GetColor(cameraRay.origin); 
			
#if CAST_SHADOWS

			// Create a ray from the collision point to the light to check for occlusion.
			Ray lightRay = CreateRay(cameraRay.origin - 10 * epsilon * cameraRay.direction, lightDirection );

			float lightMarchDistance = 0;
			int ligthNumMarchSteps = 0;

			while (lightMarchDistance < maxMarchDistance && ligthNumMarchSteps < maxNumMarchSteps)
			{
				ligthNumMarchSteps++;

				float minLightDistance = GetMinDistance(lightRay.origin);

				if (minLightDistance < epsilon)
				{
					_target[id.xy] *= _castShadowFactor;
					break;
				}

				lightMarchDistance += minLightDistance;
				lightRay.origin += lightRay.direction * minLightDistance;
			}			
#endif
			break;
		}
	
		marchDistance += minDistance;
		cameraRay.origin += cameraRay.direction * minDistance;
	}

#if GLOW

	if (!hit)
	{
		float4 Glow = max((1 - cameraRay.closestPoint/.05 ) * float4(1,1,0,0), 0);
		_target[id.xy] += Glow;
	}
#endif

}
